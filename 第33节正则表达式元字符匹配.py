'''
正则单字符匹配
字符             功能
.                匹配任意一个字符(除了\n),\.匹配点本身
[]               匹配[]中列举的字符
\d               匹配数字,即0-9
\D               匹配非数字
\s               匹配空白,即空格,tab键
\S               匹配非空白
\w               匹配单词字符,即a-z,A-Z,0-9,_
\W               匹配非单词字符

数量匹配
+                贪婪匹配寻找到最多的符合条件,匹配前一个规则的字符出现1至无数次
*                 匹配前一个规则的字符出现0至无数次
?                 匹配前一个规则的字符出现0次或出现1次
{m}               匹配前一个规则的字符出现m次
{m,}              匹配前一个规则的字符最少出现m次
{m,n}             匹配前一个规则的字符出现m次到n次

边界匹配
^               匹配字符串开头
$               匹配字符串结尾
\b              匹配一个单词的边界
\B              匹配非单词边界

分组匹配
|               匹配左右任意一个表达式,相当于或匹配左边的或者匹配右边的
()              将括号中字符作为一个分组

'''
import re

# 字符串r标记,表示当前字符串是原始字符串,即内部的转义字符无效而是普通字符
# s = ('itheima1@@python2!!666###itcast3')
# 找出字符串中的所有数字
# result = re.findall(r'\d', s)  # ['1', '2', '6', '6', '6', '3']
# result = re.findall(r'\d+', s) #['1', '2', '666', '3']
# print(result)

# 匹配账号,只能由字母或者数字组成,长度限制在6-10位之间,规则为: ^[0-9a-zA-Z]{6,10}$

# 匹配QQ号,要求纯数字,长度5-11,第1位不为0,规则为^[1-9]\d+{5,11} `^[1-9][0-9]{4,10}&
s = '2483484885@qq.com'
result = re.findall(r'^[1-9]\d{4,10}', s)
print(result)

# 匹配邮箱地址,只允许qq,163,gmail这三种邮箱的地址
# 规则'^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)$'
s = 'we2483484885@qq.com'
