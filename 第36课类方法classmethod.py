'''
类方法是针对于类对象定义的方法,在类方法中可以直接方法类属性或者调用其他类方法
基本语法
@classmethod
def 类名称(cls):
    pass

使用类方法可以不需要实例化对象调用类中的方法
@classmethod修饰器声明。它们的第一个参数是类(cls)。类方法可以通过类的实例或者类本身进行调用

类方法需要使用修饰器@classmethod标识,告诉解释器这是一个类方法,并且类方法的第一个参数应该是"cls"
由哪一个类调用的方法,方法内的"cls"就是哪一个类的引用
这个参数和其他类中的self相似

在方法内部
可以通过'cls.'访问类的属性,也可以通过'cls.'调用其他的类方法


推荐类方法的原因:不直接在类的外部设置类中的属性或者是方法,面向对象中强调数据的封装,不建议在类的外部直接对属性进行直接设置和获取
使用类方法的方式调用类内部的方法

一般需要操作类属性的方法可以使用类的实例方法,或者是和实例化对象有关的可以使用实例方法
'''


# 类方法案例
# 需求:在类中封装一个"show_tool_count的类方法,输出使用当前这个类创建的对象的个数

class Tool():
    # 定义类属性,用于记录创建了多少个工具对象
    count = 0

    # 封装一个类方法,专门实现对类中的类属性进行操作
    @classmethod
    def show_tool_count(cls):
        print(f"工具对象的数量:{cls.count}")
        cls.dayin(cls)

    def __init__(self, name):
        self.name = name
        # 每调用一次构造器或者说是析构函数,都将计数器+1,所以在创建3个对象后计数器变为3
        # 针对类属性做一个计数+1的操作
        Tool.count += 1

    def dayin(self):
        print("打印成功")


tool1 = Tool('锤子')
tool2 = Tool('斧子')
tool3 = Tool('镰刀')

# 输出对象工具的总数
Tool.show_tool_count()
